{"ast":null,"code":"var _jsxFileName = \"/home/darrekt/Desktop/School/Embedded_Systems/sprout/src/components/dataGraph.js\";\nimport Chart from 'chart.js';\nimport Data from 'assets/data/graph_data.json';\n\nvar React = require('react');\n\nvar Component = React.Component;\n\nclass DataGraph extends Component {\n  constructor(props) {\n    super(props);\n    var data = [];\n    var plantLevel = [];\n    var labels = [];\n    var colour;\n    var timeFrame;\n\n    if (this.props.timeFrame === '1h') {\n      timeFrame = 3600000;\n    } else if (this.props.timeFrame === '12h') {\n      timeFrame = 43200000;\n    } else {\n      timeFrame = 86400000;\n    }\n\n    if (this.props.dataLabel === 'temp') {\n      colour = \"#64b968\";\n    } else if (this.props.dataLabel === 'humidity') {\n      colour = \"#ffa624\";\n    } else {\n      colour = \"#ef524f\";\n    }\n\n    for (var i = 0; i < Data.length; i++) {\n      if (new Date().getTime() - new Date(Data[i].time).getTime() <= timeFrame && new Date().getTime() - new Date(Data[i].time).getTime() >= 0) {\n        labels.push(new Date(Data[i].time));\n        plantLevel.push(this.props.plantValue);\n\n        if (this.props.dataLabel === 'light') {\n          data.push(Data[i].light);\n        } else if (this.props.dataLabel === 'temp') {\n          data.push(Data[i].temp);\n        } else {\n          data.push(Data[i].humidity);\n        }\n      }\n    }\n\n    console.log(data);\n    this.state = {\n      data: data,\n      plantLevel: plantLevel,\n      labels: labels,\n      colour: colour\n    };\n    this.chartRef = React.createRef();\n  } // in props\n  // dataLabel = 'light' | 'temp' | 'humidity'\n  // plantValue (fill level)\n  // timeFrame = 'hour' | 'day' | 'week'\n\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: \"400px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.chartRef.current, {\n      type: \"line\",\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'minute'\n            }\n          }]\n        },\n        legend: {\n          display: false\n        }\n      },\n      data: {\n        labels: this.state.labels,\n        datasets: [{\n          data: this.state.data,\n          fill: 'none',\n          pointRadius: 0,\n          borderColor: this.state.colour,\n          borderWidth: 3\n        }, {\n          data: this.state.plantLevel,\n          fill: true,\n          backgroundColor: \"rgba(10,10,10,0.3)\",\n          pointRadius: 0,\n          borderWidth: 0\n        }]\n      }\n    });\n  }\n\n}\n\nexport default DataGraph;","map":{"version":3,"sources":["/home/darrekt/Desktop/School/Embedded_Systems/sprout/src/components/dataGraph.js"],"names":["Chart","Data","React","require","Component","DataGraph","constructor","props","data","plantLevel","labels","colour","timeFrame","dataLabel","i","length","Date","getTime","time","push","plantValue","light","temp","humidity","console","log","state","chartRef","createRef","render","height","componentDidMount","myChart","current","type","options","maintainAspectRatio","scales","xAxes","unit","legend","display","datasets","fill","pointRadius","borderColor","borderWidth","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,SAAS,GAAGF,KAAK,CAACE,SAAtB;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAE9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,MAAJ;AACA,QAAIC,SAAJ;;AAEA,QAAI,KAAKL,KAAL,CAAWK,SAAX,KAAyB,IAA7B,EAAmC;AAC/BA,MAAAA,SAAS,GAAG,OAAZ;AACH,KAFD,MAEO,IAAI,KAAKL,KAAL,CAAWK,SAAX,KAAyB,KAA7B,EAAoC;AACvCA,MAAAA,SAAS,GAAG,QAAZ;AACH,KAFM,MAEA;AACHA,MAAAA,SAAS,GAAG,QAAZ;AACH;;AAED,QAAI,KAAKL,KAAL,CAAWM,SAAX,KAAyB,MAA7B,EAAqC;AACjCF,MAAAA,MAAM,GAAG,SAAT;AACH,KAFD,MAEO,IAAI,KAAKJ,KAAL,CAAWM,SAAX,KAAyB,UAA7B,EAAyC;AAC5CF,MAAAA,MAAM,GAAG,SAAT;AACH,KAFM,MAEA;AACHA,MAAAA,MAAM,GAAG,SAAT;AACH;;AAED,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACc,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAK,IAAIE,IAAJ,EAAD,CAAaC,OAAb,KAA0B,IAAID,IAAJ,CAASf,IAAI,CAACa,CAAD,CAAJ,CAAQI,IAAjB,CAAD,CAAyBD,OAAzB,EAAzB,IAA+DL,SAA/D,IAA6E,IAAII,IAAJ,EAAD,CAAaC,OAAb,KAA0B,IAAID,IAAJ,CAASf,IAAI,CAACa,CAAD,CAAJ,CAAQI,IAAjB,CAAD,CAAyBD,OAAzB,EAAzB,IAA+D,CAA/I,EAAkJ;AAC9IP,QAAAA,MAAM,CAACS,IAAP,CAAY,IAAIH,IAAJ,CAASf,IAAI,CAACa,CAAD,CAAJ,CAAQI,IAAjB,CAAZ;AACAT,QAAAA,UAAU,CAACU,IAAX,CAAgB,KAAKZ,KAAL,CAAWa,UAA3B;;AACA,YAAI,KAAKb,KAAL,CAAWM,SAAX,KAAyB,OAA7B,EAAsC;AAClCL,UAAAA,IAAI,CAACW,IAAL,CAAUlB,IAAI,CAACa,CAAD,CAAJ,CAAQO,KAAlB;AACH,SAFD,MAEO,IAAI,KAAKd,KAAL,CAAWM,SAAX,KAAyB,MAA7B,EAAqC;AACxCL,UAAAA,IAAI,CAACW,IAAL,CAAUlB,IAAI,CAACa,CAAD,CAAJ,CAAQQ,IAAlB;AACH,SAFM,MAEA;AACHd,UAAAA,IAAI,CAACW,IAAL,CAAUlB,IAAI,CAACa,CAAD,CAAJ,CAAQS,QAAlB;AACH;AACJ;AACJ;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AAEA,SAAKkB,KAAL,GAAa;AACTlB,MAAAA,IAAI,EAAEA,IADG;AAETC,MAAAA,UAAU,EAAEA,UAFH;AAGTC,MAAAA,MAAM,EAAEA,MAHC;AAITC,MAAAA,MAAM,EAAEA;AAJC,KAAb;AAMA,SAAKgB,QAAL,GAAgBzB,KAAK,CAAC0B,SAAN,EAAhB;AACH,GAjD6B,CAmD9B;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,GAAG,EAAE,KAAKH,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAEDI,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,OAAL,GAAe,IAAIhC,KAAJ,CAAU,KAAK2B,QAAL,CAAcM,OAAxB,EAAiC;AAC5CC,MAAAA,IAAI,EAAE,MADsC;AAE5CC,MAAAA,OAAO,EAAE;AACLC,QAAAA,mBAAmB,EAAE,KADhB;AAELC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJJ,YAAAA,IAAI,EAAE,MADF;AAEJhB,YAAAA,IAAI,EAAE;AAACqB,cAAAA,IAAI,EAAE;AAAP;AAFF,WAAD;AADH,SAFH;AAQLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL;AARH,OAFmC;AAc5CjC,MAAAA,IAAI,EAAE;AACFE,QAAAA,MAAM,EAAE,KAAKgB,KAAL,CAAWhB,MADjB;AAEFgC,QAAAA,QAAQ,EAAE,CACN;AACIlC,UAAAA,IAAI,EAAE,KAAKkB,KAAL,CAAWlB,IADrB;AAEImC,UAAAA,IAAI,EAAE,MAFV;AAGIC,UAAAA,WAAW,EAAE,CAHjB;AAIIC,UAAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWf,MAJ5B;AAKImC,UAAAA,WAAW,EAAE;AALjB,SADM,EAQN;AACItC,UAAAA,IAAI,EAAE,KAAKkB,KAAL,CAAWjB,UADrB;AAEIkC,UAAAA,IAAI,EAAE,IAFV;AAGII,UAAAA,eAAe,EAAE,oBAHrB;AAIIH,UAAAA,WAAW,EAAE,CAJjB;AAKIE,UAAAA,WAAW,EAAE;AALjB,SARM;AAFR;AAdsC,KAAjC,CAAf;AAkCH;;AApG6B;;AAuGlC,eAAezC,SAAf","sourcesContent":["import Chart from 'chart.js'\nimport Data from 'assets/data/graph_data.json'\n\nvar React = require('react');\nvar Component = React.Component;\n\nclass DataGraph extends Component {\n\n    constructor(props) {\n        super(props);\n        var data = [];\n        var plantLevel = [];\n        var labels = [];\n        var colour;\n        var timeFrame;\n\n        if (this.props.timeFrame === '1h') {\n            timeFrame = 3600000;\n        } else if (this.props.timeFrame === '12h') {\n            timeFrame = 43200000;\n        } else {\n            timeFrame = 86400000;\n        }\n\n        if (this.props.dataLabel === 'temp') {\n            colour = \"#64b968\";\n        } else if (this.props.dataLabel === 'humidity') {\n            colour = \"#ffa624\";\n        } else {\n            colour = \"#ef524f\";\n        }\n\n        for (var i = 0; i < Data.length; i++) {\n            if ((new Date()).getTime() - (new Date(Data[i].time)).getTime() <= timeFrame && (new Date()).getTime() - (new Date(Data[i].time)).getTime() >= 0) {\n                labels.push(new Date(Data[i].time));\n                plantLevel.push(this.props.plantValue);\n                if (this.props.dataLabel === 'light') {\n                    data.push(Data[i].light);\n                } else if (this.props.dataLabel === 'temp') {\n                    data.push(Data[i].temp);\n                } else {\n                    data.push(Data[i].humidity);\n                }\n            }\n        }\n\n        console.log(data);\n\n        this.state = {\n            data: data,\n            plantLevel: plantLevel,\n            labels: labels,\n            colour: colour\n        };\n        this.chartRef = React.createRef();\n    }\n\n    // in props\n    // dataLabel = 'light' | 'temp' | 'humidity'\n    // plantValue (fill level)\n    // timeFrame = 'hour' | 'day' | 'week'\n\n    render() {\n        return (\n            <div style={{height: \"400px\"}}>\n                <canvas ref={this.chartRef}/>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n\n        this.myChart = new Chart(this.chartRef.current, {\n            type: \"line\",\n            options: {\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {unit: 'minute'}\n                    }]\n                },\n                legend: {\n                    display: false\n                }\n            },\n            data: {\n                labels: this.state.labels,\n                datasets: [\n                    {\n                        data: this.state.data,\n                        fill: 'none',\n                        pointRadius: 0,\n                        borderColor: this.state.colour,\n                        borderWidth: 3\n                    },\n                    {\n                        data: this.state.plantLevel,\n                        fill: true,\n                        backgroundColor: \"rgba(10,10,10,0.3)\",\n                        pointRadius: 0,\n                        borderWidth: 0,\n                    }\n                ]\n            }\n        });\n    }\n}\n\nexport default DataGraph;"]},"metadata":{},"sourceType":"module"}