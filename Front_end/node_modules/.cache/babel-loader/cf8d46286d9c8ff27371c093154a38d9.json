{"ast":null,"code":"var _jsxFileName = \"/home/darrekt/Desktop/School/Embedded_Systems/sprout/Front_end/src/modules/components/dataGraph.js\";\nimport Chart from 'chart.js';\n\nvar React = require('react');\n\nvar Component = React.Component;\n\nclass DataGraph extends Component {\n  constructor(props) {\n    super(props);\n    var data = [];\n    var plantLevel = [];\n    var labels = [];\n    var colour;\n    var timeFrame;\n    var yMax;\n\n    if (this.props.timeFrame === '1h') {\n      timeFrame = 3600000;\n    } else if (this.props.timeFrame === '12h') {\n      timeFrame = 43200000;\n    } else {\n      timeFrame = 86400000;\n    }\n\n    if (this.props.dataLabel === 'temp') {\n      colour = \"#64b968\";\n      yMax = 60;\n    } else if (this.props.dataLabel === 'humidity') {\n      colour = \"#ffa624\";\n      yMax = 100;\n    } else {\n      colour = \"#ef524f\";\n      yMax = 20000;\n    }\n\n    this.state = {\n      data: data,\n      plantLevel: plantLevel,\n      labels: labels,\n      colour: colour,\n      timeFrame: timeFrame,\n      yMax: yMax\n    };\n    this.chartRef = React.createRef();\n  } // in props\n  // dataLabel = 'light' | 'temp' | 'humidity'\n  // plantValue (fill level)\n  // timeFrame = 'hour' | 'day' | 'week'\n\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: \"400px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.data);\n    this.myChart.data.datasets[0].data = this.state.data;\n    this.myChart.data.labels = this.state.labels;\n    this.myChart.data.datasets[1].data = this.myChart.data.labels.map(_ => this.props.plantValue);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    fetch('http://127.0.0.1:8081/data.json').then(response => response.json()).then(Data => {\n      var labels = [];\n      var data = [];\n      var plantLevel = [];\n\n      for (var i = 0; i < Data.length; i++) {\n        if (new Date().getTime() - new Date(Data[i].time).getTime() <= this.state.timeFrame && new Date().getTime() - new Date(Data[i].time).getTime() >= 0) {\n          labels.push(new Date(Data[i].time));\n          plantLevel.push(this.props.plantValue);\n\n          if (this.props.dataLabel === 'light') {\n            data.push(Data[i].light);\n          } else if (this.props.dataLabel === 'temp') {\n            data.push(Data[i].temp);\n          } else {\n            data.push(Data[i].humidity);\n          }\n        }\n      }\n\n      this.setState({\n        data: data,\n        labels: labels,\n        plantLevel: plantLevel\n      });\n    }).catch(error => {\n      // handle your errors here\n      console.error(error);\n    });\n    this.myChart = new Chart(this.chartRef.current, {\n      type: \"line\",\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'minute'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              min: 0,\n              max: this.state.yMax\n            }\n          }]\n        },\n        legend: {\n          display: false\n        }\n      },\n      data: {\n        labels: this.state.labels,\n        datasets: [{\n          data: this.state.data,\n          fill: 'none',\n          pointRadius: 0,\n          borderColor: this.state.colour,\n          borderWidth: 3\n        }, {\n          data: this.state.plantLevel,\n          fill: true,\n          backgroundColor: \"rgba(5,5,5,0.2)\",\n          pointRadius: 0,\n          borderWidth: 0\n        }]\n      }\n    });\n  }\n\n}\n\nexport default DataGraph;","map":{"version":3,"sources":["/home/darrekt/Desktop/School/Embedded_Systems/sprout/Front_end/src/modules/components/dataGraph.js"],"names":["Chart","React","require","Component","DataGraph","constructor","props","data","plantLevel","labels","colour","timeFrame","yMax","dataLabel","state","chartRef","createRef","render","height","componentDidUpdate","console","log","myChart","datasets","map","_","plantValue","update","componentDidMount","fetch","then","response","json","Data","i","length","Date","getTime","time","push","light","temp","humidity","setState","catch","error","current","type","options","maintainAspectRatio","scales","xAxes","unit","yAxes","ticks","min","max","legend","display","fill","pointRadius","borderColor","borderWidth","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,SAAS,GAAGF,KAAK,CAACE,SAAtB;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAE9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,MAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,IAAJ;;AAEA,QAAI,KAAKN,KAAL,CAAWK,SAAX,KAAyB,IAA7B,EAAmC;AAC/BA,MAAAA,SAAS,GAAG,OAAZ;AACH,KAFD,MAEO,IAAI,KAAKL,KAAL,CAAWK,SAAX,KAAyB,KAA7B,EAAoC;AACvCA,MAAAA,SAAS,GAAG,QAAZ;AACH,KAFM,MAEA;AACHA,MAAAA,SAAS,GAAG,QAAZ;AACH;;AAED,QAAI,KAAKL,KAAL,CAAWO,SAAX,KAAyB,MAA7B,EAAqC;AACjCH,MAAAA,MAAM,GAAG,SAAT;AACAE,MAAAA,IAAI,GAAG,EAAP;AACH,KAHD,MAGO,IAAI,KAAKN,KAAL,CAAWO,SAAX,KAAyB,UAA7B,EAAyC;AAC5CH,MAAAA,MAAM,GAAG,SAAT;AACAE,MAAAA,IAAI,GAAG,GAAP;AACH,KAHM,MAGA;AACHF,MAAAA,MAAM,GAAG,SAAT;AACAE,MAAAA,IAAI,GAAG,KAAP;AACH;;AAED,SAAKE,KAAL,GAAa;AACTP,MAAAA,IAAI,EAAEA,IADG;AAETC,MAAAA,UAAU,EAAEA,UAFH;AAGTC,MAAAA,MAAM,EAAEA,MAHC;AAITC,MAAAA,MAAM,EAAEA,MAJC;AAKTC,MAAAA,SAAS,EAAEA,SALF;AAMTC,MAAAA,IAAI,EAAEA;AANG,KAAb;AAQA,SAAKG,QAAL,GAAgBd,KAAK,CAACe,SAAN,EAAhB;AACH,GAvC6B,CAyC9B;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,GAAG,EAAE,KAAKH,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAEDI,EAAAA,kBAAkB,GAAG;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWP,IAAvB;AACA,SAAKe,OAAL,CAAaf,IAAb,CAAkBgB,QAAlB,CAA2B,CAA3B,EAA8BhB,IAA9B,GAAqC,KAAKO,KAAL,CAAWP,IAAhD;AACA,SAAKe,OAAL,CAAaf,IAAb,CAAkBE,MAAlB,GAA2B,KAAKK,KAAL,CAAWL,MAAtC;AACA,SAAKa,OAAL,CAAaf,IAAb,CAAkBgB,QAAlB,CAA2B,CAA3B,EAA8BhB,IAA9B,GAAqC,KAAKe,OAAL,CAAaf,IAAb,CAAkBE,MAAlB,CAAyBe,GAAzB,CAA6BC,CAAC,IAAI,KAAKnB,KAAL,CAAWoB,UAA7C,CAArC;AACA,SAAKJ,OAAL,CAAaK,MAAb;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhBC,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZ,UAAIxB,MAAM,GAAG,EAAb;AACA,UAAIF,IAAI,GAAG,EAAX;AACA,UAAIC,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAK,IAAIE,IAAJ,EAAD,CAAaC,OAAb,KAA0B,IAAID,IAAJ,CAASH,IAAI,CAACC,CAAD,CAAJ,CAAQI,IAAjB,CAAD,CAAyBD,OAAzB,EAAzB,IAA+D,KAAKvB,KAAL,CAAWH,SAA1E,IAAwF,IAAIyB,IAAJ,EAAD,CAAaC,OAAb,KAA0B,IAAID,IAAJ,CAASH,IAAI,CAACC,CAAD,CAAJ,CAAQI,IAAjB,CAAD,CAAyBD,OAAzB,EAAzB,IAA+D,CAA1J,EAA6J;AACzJ5B,UAAAA,MAAM,CAAC8B,IAAP,CAAY,IAAIH,IAAJ,CAASH,IAAI,CAACC,CAAD,CAAJ,CAAQI,IAAjB,CAAZ;AACA9B,UAAAA,UAAU,CAAC+B,IAAX,CAAgB,KAAKjC,KAAL,CAAWoB,UAA3B;;AACA,cAAI,KAAKpB,KAAL,CAAWO,SAAX,KAAyB,OAA7B,EAAsC;AAClCN,YAAAA,IAAI,CAACgC,IAAL,CAAUN,IAAI,CAACC,CAAD,CAAJ,CAAQM,KAAlB;AACH,WAFD,MAEO,IAAI,KAAKlC,KAAL,CAAWO,SAAX,KAAyB,MAA7B,EAAqC;AACxCN,YAAAA,IAAI,CAACgC,IAAL,CAAUN,IAAI,CAACC,CAAD,CAAJ,CAAQO,IAAlB;AACH,WAFM,MAEA;AACHlC,YAAAA,IAAI,CAACgC,IAAL,CAAUN,IAAI,CAACC,CAAD,CAAJ,CAAQQ,QAAlB;AACH;AACJ;AACJ;;AACD,WAAKC,QAAL,CAAc;AACVpC,QAAAA,IAAI,EAAEA,IADI;AAEVE,QAAAA,MAAM,EAAEA,MAFE;AAGVD,QAAAA,UAAU,EAAEA;AAHF,OAAd;AAKH,KAxBD,EAyBCoC,KAzBD,CAyBQC,KAAD,IAAW;AACd;AACAzB,MAAAA,OAAO,CAACyB,KAAR,CAAcA,KAAd;AACH,KA5BD;AA8BA,SAAKvB,OAAL,GAAe,IAAItB,KAAJ,CAAU,KAAKe,QAAL,CAAc+B,OAAxB,EAAiC;AAC5CC,MAAAA,IAAI,EAAE,MADsC;AAE5CC,MAAAA,OAAO,EAAE;AACLC,QAAAA,mBAAmB,EAAE,KADhB;AAELC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJJ,YAAAA,IAAI,EAAE,MADF;AAEJT,YAAAA,IAAI,EAAE;AAACc,cAAAA,IAAI,EAAE;AAAP;AAFF,WAAD,CADH;AAKJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,GAAG,EAAE,CADF;AAEHC,cAAAA,GAAG,EAAE,KAAK1C,KAAL,CAAWF;AAFb;AADH,WAAD;AALH,SAFH;AAcL6C,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL;AAdH,OAFmC;AAoB5CnD,MAAAA,IAAI,EAAE;AACFE,QAAAA,MAAM,EAAE,KAAKK,KAAL,CAAWL,MADjB;AAEFc,QAAAA,QAAQ,EAAE,CACN;AACIhB,UAAAA,IAAI,EAAE,KAAKO,KAAL,CAAWP,IADrB;AAEIoD,UAAAA,IAAI,EAAE,MAFV;AAGIC,UAAAA,WAAW,EAAE,CAHjB;AAIIC,UAAAA,WAAW,EAAE,KAAK/C,KAAL,CAAWJ,MAJ5B;AAKIoD,UAAAA,WAAW,EAAE;AALjB,SADM,EAQN;AACIvD,UAAAA,IAAI,EAAE,KAAKO,KAAL,CAAWN,UADrB;AAEImD,UAAAA,IAAI,EAAE,IAFV;AAGII,UAAAA,eAAe,EAAE,iBAHrB;AAIIH,UAAAA,WAAW,EAAE,CAJjB;AAKIE,UAAAA,WAAW,EAAE;AALjB,SARM;AAFR;AApBsC,KAAjC,CAAf;AAwCH;;AAtI6B;;AAyIlC,eAAe1D,SAAf","sourcesContent":["import Chart from 'chart.js'\n\nvar React = require('react');\nvar Component = React.Component;\n\nclass DataGraph extends Component {\n\n    constructor(props) {\n        super(props);\n        var data = [];\n        var plantLevel = [];\n        var labels = [];\n        var colour;\n        var timeFrame;\n        var yMax;\n\n        if (this.props.timeFrame === '1h') {\n            timeFrame = 3600000;\n        } else if (this.props.timeFrame === '12h') {\n            timeFrame = 43200000;\n        } else {\n            timeFrame = 86400000;\n        }\n\n        if (this.props.dataLabel === 'temp') {\n            colour = \"#64b968\";\n            yMax = 60;\n        } else if (this.props.dataLabel === 'humidity') {\n            colour = \"#ffa624\";\n            yMax = 100;\n        } else {\n            colour = \"#ef524f\";\n            yMax = 20000;\n        }\n\n        this.state = {\n            data: data,\n            plantLevel: plantLevel,\n            labels: labels,\n            colour: colour,\n            timeFrame: timeFrame,\n            yMax: yMax\n        };\n        this.chartRef = React.createRef();\n    }\n\n    // in props\n    // dataLabel = 'light' | 'temp' | 'humidity'\n    // plantValue (fill level)\n    // timeFrame = 'hour' | 'day' | 'week'\n\n    render() {\n        return (\n            <div style={{height: \"400px\"}}>\n                <canvas ref={this.chartRef}/>\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.data);\n        this.myChart.data.datasets[0].data = this.state.data;\n        this.myChart.data.labels = this.state.labels;\n        this.myChart.data.datasets[1].data = this.myChart.data.labels.map(_ => this.props.plantValue);\n        this.myChart.update();\n    }\n\n    componentDidMount() {\n        \n        fetch('http://127.0.0.1:8081/data.json')\n        .then(response => response.json())\n        .then((Data) => {\n            var labels = [];\n            var data = [];\n            var plantLevel = [];\n            for (var i = 0; i < Data.length; i++) {\n                if ((new Date()).getTime() - (new Date(Data[i].time)).getTime() <= this.state.timeFrame && (new Date()).getTime() - (new Date(Data[i].time)).getTime() >= 0) {\n                    labels.push(new Date(Data[i].time));\n                    plantLevel.push(this.props.plantValue);\n                    if (this.props.dataLabel === 'light') {\n                        data.push(Data[i].light);\n                    } else if (this.props.dataLabel === 'temp') {\n                        data.push(Data[i].temp);\n                    } else {\n                        data.push(Data[i].humidity);\n                    }\n                }\n            }\n            this.setState({\n                data: data,\n                labels: labels,\n                plantLevel: plantLevel\n            });\n        })\n        .catch((error) => {\n            // handle your errors here\n            console.error(error)\n        });\n\n        this.myChart = new Chart(this.chartRef.current, {\n            type: \"line\",\n            options: {\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {unit: 'minute'}\n                    }],\n                    yAxes: [{\n                        ticks: {\n                            min: 0,\n                            max: this.state.yMax\n                        }\n                    }]\n                },\n                legend: {\n                    display: false\n                }\n            },\n            data: {\n                labels: this.state.labels,\n                datasets: [\n                    {\n                        data: this.state.data,\n                        fill: 'none',\n                        pointRadius: 0,\n                        borderColor: this.state.colour,\n                        borderWidth: 3\n                    },\n                    {\n                        data: this.state.plantLevel,\n                        fill: true,\n                        backgroundColor: \"rgba(5,5,5,0.2)\",\n                        pointRadius: 0,\n                        borderWidth: 0,\n                    }\n                ]\n            }\n        });\n    }\n}\n\nexport default DataGraph;"]},"metadata":{},"sourceType":"module"}